/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  boolean,
  lazy,
  nullable,
  number,
  object,
  Schema,
  string,
} from '../schema';
import {
  ChannelProperties,
  channelPropertiesSchema,
} from './channelProperties';
import { Metadata22, metadata22Schema } from './metadata22';

export interface Data {
  id: string;
  referenceId: string;
  status: string;
  currency: string;
  checkoutMethod: string;
  chargeAmount: number;
  captureAmount: number;
  refundedAmount: number;
  channelCode: string;
  channelProperties: ChannelProperties;
  actions: string | null;
  isRedirectRequired: boolean;
  callbackUrl: string;
  created: string;
  updated: string;
  voidStatus: string | null;
  voidedAt: string | null;
  captureNow: boolean;
  customerId: string | null;
  paymentMethodId: string | null;
  failureCode: string | null;
  basket: string | null;
  metadata: Metadata22;
}

export const dataSchema: Schema<Data> = object({
  id: ['id', string()],
  referenceId: ['reference_id', string()],
  status: ['status', string()],
  currency: ['currency', string()],
  checkoutMethod: ['checkout_method', string()],
  chargeAmount: ['charge_amount', number()],
  captureAmount: ['capture_amount', number()],
  refundedAmount: ['refunded_amount', number()],
  channelCode: ['channel_code', string()],
  channelProperties: [
    'channel_properties',
    lazy(() => channelPropertiesSchema),
  ],
  actions: ['actions', nullable(string())],
  isRedirectRequired: ['is_redirect_required', boolean()],
  callbackUrl: ['callback_url', string()],
  created: ['created', string()],
  updated: ['updated', string()],
  voidStatus: ['void_status', nullable(string())],
  voidedAt: ['voided_at', nullable(string())],
  captureNow: ['capture_now', boolean()],
  customerId: ['customer_id', nullable(string())],
  paymentMethodId: ['payment_method_id', nullable(string())],
  failureCode: ['failure_code', nullable(string())],
  basket: ['basket', nullable(string())],
  metadata: ['metadata', lazy(() => metadata22Schema)],
});
