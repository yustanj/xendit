/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  boolean,
  lazy,
  nullable,
  number,
  object,
  Schema,
  string,
} from '../schema';
import { Actions, actionsSchema } from './actions';
import {
  ChannelProperties6,
  channelProperties6Schema,
} from './channelProperties6';
import { Metadata2, metadata2Schema } from './metadata2';

export interface ShopeepayTokenizedPaymentSampleResponse {
  id: string;
  businessId: string;
  referenceId: string;
  status: string;
  currency: string;
  chargeAmount: number;
  captureAmount: number;
  refundedAmount: string | null;
  checkoutMethod: string;
  channelCode: string;
  channelProperties: ChannelProperties6;
  actions: Actions;
  isRedirectRequired: boolean;
  callbackUrl: string;
  created: string;
  updated: string;
  voidStatus: string | null;
  voidedAt: string | null;
  captureNow: boolean;
  customerId: string;
  paymentMethodId: string;
  failureCode: string | null;
  basket: string | null;
  metadata: Metadata2;
}

export const shopeepayTokenizedPaymentSampleResponseSchema: Schema<ShopeepayTokenizedPaymentSampleResponse> = object(
  {
    id: ['id', string()],
    businessId: ['business_id', string()],
    referenceId: ['reference_id', string()],
    status: ['status', string()],
    currency: ['currency', string()],
    chargeAmount: ['charge_amount', number()],
    captureAmount: ['capture_amount', number()],
    refundedAmount: ['refunded_amount', nullable(string())],
    checkoutMethod: ['checkout_method', string()],
    channelCode: ['channel_code', string()],
    channelProperties: [
      'channel_properties',
      lazy(() => channelProperties6Schema),
    ],
    actions: ['actions', lazy(() => actionsSchema)],
    isRedirectRequired: ['is_redirect_required', boolean()],
    callbackUrl: ['callback_url', string()],
    created: ['created', string()],
    updated: ['updated', string()],
    voidStatus: ['void_status', nullable(string())],
    voidedAt: ['voided_at', nullable(string())],
    captureNow: ['capture_now', boolean()],
    customerId: ['customer_id', string()],
    paymentMethodId: ['payment_method_id', string()],
    failureCode: ['failure_code', nullable(string())],
    basket: ['basket', nullable(string())],
    metadata: ['metadata', lazy(() => metadata2Schema)],
  }
);
