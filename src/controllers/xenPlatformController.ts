/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateAccountRequest,
  createAccountRequestSchema,
} from '../models/createAccountRequest';
import {
  CreateFeeRuleRequest,
  createFeeRuleRequestSchema,
} from '../models/createFeeRuleRequest';
import {
  CreateTransferRequest,
  createTransferRequestSchema,
} from '../models/createTransferRequest';
import {
  EXAMPLECreateDisbursementForSubAccountRequestRequest,
  eXAMPLECreateDisbursementForSubAccountRequestRequestSchema,
} from '../models/eXAMPLECreateDisbursementForSubAccountRequestRequest';
import {
  EXAMPLECreateRecurringPaymentForSubAccountRequestRequest,
  eXAMPLECreateRecurringPaymentForSubAccountRequestRequestSchema,
} from '../models/eXAMPLECreateRecurringPaymentForSubAccountRequestRequest';
import {
  EXAMPLECreatingAnInvoiceForASubAccountRequest,
  eXAMPLECreatingAnInvoiceForASubAccountRequestSchema,
} from '../models/eXAMPLECreatingAnInvoiceForASubAccountRequest';
import {
  SetCallbackURLRequest,
  setCallbackURLRequestSchema,
} from '../models/setCallbackURLRequest';
import {
  V2CreateAccountAsyncRequest,
  v2CreateAccountAsyncRequestSchema,
} from '../models/v2CreateAccountAsyncRequest';
import {
  V2UpdateAccountRequest,
  v2UpdateAccountRequestSchema,
} from '../models/v2UpdateAccountRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class XenPlatformController extends BaseController {
  /**
   * Note: Accounts can only be created using your PRODUCTION API key. After your Accounts are created,
   * you may create development transactions for them using your DEVELOPMENT API key.
   *
   * The Create Account API allows your xenPlatform enabled account to create sub-accounts that are
   * linked to your account. The response includes the corresponding `user_id` value that you should
   * store in order to make transactions for that sub-account in the future.
   *
   * There are two types of accounts that can be created: `MANAGED`, `OWNED`.
   *
   * For `MANAGED` accounts:
   * When a successful POST request is made to the Create Account API with a valid email in the
   * `account_email` field, a sub-account is immediately created and a sub-account invitation email is
   * sent to that email for further registration. Via the sub-account invitation email, your third-party
   * partners can complete registration in order to get access to their own Xendit dashboard.
   *
   * For `OWNED` accounts:
   * Owned accounts do not get access to their own Xendit Dashboards. When a successful POST request is
   * made to the Create Account API with a valid email in the `account_email` field, a sub-account is
   * immediately created. No invitation email is sent to that email for further registration. The
   * `business_name` parameter is mandatory for `OWNED` accounts.
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createAccount(
    contentType: string,
    body: CreateAccountRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/accounts');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createAccountRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * The Set Callback URLs API allows you to set your sub-accounts' Callback URLs.
   *
   * Use your production key to set production URLs; use your development key to set development URLs.
   *
   * Note: Production callback URLs have to use the HTTPs protocol.
   *
   *
   * The following can be used in the `:type` query parameter.
   * 1. `invoice`: When an invoice is paid, our systems will send a callback to the URL
   * 2. `disbursement`: When a disbursement is sent, our systems will send a callback to the URL
   * 3. `fva_status`: When a FVA is created or updated, our systems will send a callback to the URL
   * 4. `fva_paid`: When a FVA is paid, our systems will send a callback to the URL
   *
   * @param type
   * @param contentType
   * @param forUserId
   * @param body
   * @return Response from the API call
   */
  async setCallbackURL(
    type: string,
    contentType: string,
    forUserId: string,
    body: SetCallbackURLRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      type: [type, string()],
      contentType: [contentType, string()],
      forUserId: [forUserId, string()],
      body: [body, setCallbackURLRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('for-user-id', mapped.forUserId);
    req.json(mapped.body);
    req.appendTemplatePath`/callback_urls/${mapped.type}`;
    return req.call(requestOptions);
  }

  /**
   * The Create Account API allows you to create Accounts for your Partners that are linked to your
   * Platform. Once an Account is created, you may accept payments on its behalf. Additionally, you can
   * route payments to/from the Account via the Transfers API or Platform fee API.
   *
   * There are two types of Accounts that can be created: `MANAGED`, `OWNED`. Review our documentation
   * for recommendations on which Account type to use for your business model.
   *
   * `MANAGED` Accounts provide your Partners with full-fledged Xendit Accounts that your Platform can
   * transact on behalf of. Your Partners may register their Account via an invitation email is sent to
   * the `email`. Thereafter, your Partners login to their own Xendit dashboard to complete the
   * onboarding process.
   *
   * `OWNED` Accounts are invisible to your Partners and fully controlled by you. You may transact on
   * behalf of an `OWNED` Account once they have been created using payment methods that have been
   * enabled on your Platform.
   *
   * Note for `OWNED` Accounts: Newly activated payment methods and changes made to Callback URLs on the
   * Platform do not automatically change for existing `OWNED` accounts. We recommend activating all
   * relevant payment methods and setting up your Callback URLs before creating `OWNED` Accounts.
   * Alternatively, contact us when you need to make a change.
   *
   * Store the returned account `id` value to make transactions for that Account in the future.
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async v2CreateAccountAsync(
    contentType: string,
    body: V2CreateAccountAsyncRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/v2/accounts');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, v2CreateAccountAsyncRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Use the GET Account endpoint to retrieve the details of a single Account that has been created on or
   * linked to your Platform.
   *
   * You may poll this endpoint to get information like: i) the status of the Account and whether real-
   * money payments can be created on its behalf, ii) the public information that is displayed when
   * payments are created.
   *
   * @param id
   * @param contentType
   * @return Response from the API call
   */
  async v2GetAccount(
    id: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      id: [id, string()],
      contentType: [contentType, string()],
    });
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/v2/accounts/${mapped.id}`;
    return req.call(requestOptions);
  }

  /**
   * Use the Update Account endpoint to update: i) `public_profile` information (e.g. `business_name`)
   * that is displayed when payments are created on behalf of your Accounts', ii) Account identification
   * labels (e.g. `email`)
   *
   * This operation is currently only enabled for `OWNED` accounts.
   *
   * @param id
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async v2UpdateAccount(
    id: string,
    contentType: string,
    body: V2UpdateAccountRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      id: [id, string()],
      contentType: [contentType, string()],
      body: [body, v2UpdateAccountRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    req.appendTemplatePath`/v2/accounts/${mapped.id}`;
    return req.call(requestOptions);
  }

  /**
   * The Transfers API allows you to transfer balances from your sub-accounts to your master account and
   * vice versa. Use this to manage, or split payments between your platform and your sub accounts within
   * the Xendit ecosystem.
   *
   * Visit your [xenPlatform dashboard](https://dashboard.xendit.co/login) in order to view the user_id
   * of your account and sub-accounts.
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createTransfer(
    contentType: string,
    body: CreateTransferRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/transfers');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createTransferRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * The Platform Fee feature allows you to automatically charge a fee when creating a payment on behalf
   * of your sub-account. Use this feature to collect fees for the transactions that you accept on behalf
   * of your Partners.
   *
   * A Fee Rule Object defines how payments accepted on behalf of a sub-account are routed by xenPlatform.
   * Include the `fee_rule_id` returned in the response in supported transaction endpoints - Invoices,
   * eWallets - to automatically charge a Platform fee once payments settle.
   *
   * *Note: Fees are transferred from your sub-accounts at 15 minute intervals once your transaction has
   * settled. As such, you may find that there is up to 15 minute delay from when settlement occurs, to
   * when the Platform fee is deducted.*
   *
   * @param body
   * @return Response from the API call
   */
  async createFeeRule(
    body: CreateFeeRuleRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/fee_rules');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createFeeRuleRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Once a sub-account has been created, you may make transactions for them by simply including a `for-
   * user-id` field in the header of your request to any Xendit API.
   *
   * The value in this field should include the full `user_id` of a sub-account that has previously been
   * created by you.
   *
   * This example demonstrates how to create an invoice for a sub-account using the Create Invoice API.
   *
   * Note that for the Create Invoice API, the response will provide you with a confirmation that the
   * invoice was created for the correct sub-account `user_id`.
   *
   * Please refer to the [Xendit API reference](https://xendit.github.io/apireference/) for all supported
   * APIs.
   *
   * @param contentType
   * @param forUserId
   * @param body
   * @return Response from the API call
   */
  async eXAMPLECreatingAnInvoiceForASubAccount(
    contentType: string,
    forUserId: string,
    body: EXAMPLECreatingAnInvoiceForASubAccountRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/v2/invoices');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      forUserId: [forUserId, string()],
      body: [body, eXAMPLECreatingAnInvoiceForASubAccountRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('for-user-id', mapped.forUserId);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * You may also create a Disbursement request on behalf of your sub-accounts to send funds out from
   * your sub-accounts' Cash balance.
   *
   * The value in this field should include the full `user_id` of a sub-account that has previously been
   * created by you.
   *
   * This example demonstrates how to create a disbursement for a sub-account using the Create
   * Disbursement API.
   *
   * Note that for the Create Disbursement API, the response will provide you with a confirmation that
   * the invoice was created for the correct sub-account `user_id`.
   *
   * Please refer to the [Xendit API reference](https://xendit.github.io/apireference/) for all supported
   * APIs.
   *
   * @param contentType
   * @param forUserId
   * @param body
   * @return Response from the API call
   */
  async eXAMPLECreateDisbursementForSubAccountRequest(
    contentType: string,
    forUserId: string,
    body: EXAMPLECreateDisbursementForSubAccountRequestRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      forUserId: [forUserId, string()],
      body: [body, eXAMPLECreateDisbursementForSubAccountRequestRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('for-user-id', mapped.forUserId);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * You may also create a Recurring payment request on behalf of your sub-accounts.
   *
   * The value in this field should include the full `user_id` of a sub-account that has previously been
   * created by you.
   *
   * This example demonstrates how to create a disbursement for a sub-account using the Create Recurring
   * Payment API.
   *
   * Note that for the Create Recurring Payment API, the response will provide you with a confirmation
   * that the invoice was created for the correct sub-account `user_id`.
   *
   * Please refer to the [Xendit API reference](https://xendit.github.io/apireference/) for all supported
   * APIs.
   *
   * @param contentType
   * @param forUserId
   * @param body
   * @return Response from the API call
   */
  async eXAMPLECreateRecurringPaymentForSubAccountRequest(
    contentType: string,
    forUserId: string,
    body: EXAMPLECreateRecurringPaymentForSubAccountRequestRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/recurring_payments');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      forUserId: [forUserId, string()],
      body: [
        body,
        eXAMPLECreateRecurringPaymentForSubAccountRequestRequestSchema,
      ],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('for-user-id', mapped.forUserId);
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
