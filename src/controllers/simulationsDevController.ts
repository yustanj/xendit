/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  TESTAlfamartPaymentRequest,
  tESTAlfamartPaymentRequestSchema,
} from '../models/tESTAlfamartPaymentRequest';
import {
  TESTDisbursementFailBankMaintenanceDowntimeRequest,
  tESTDisbursementFailBankMaintenanceDowntimeRequestSchema,
} from '../models/tESTDisbursementFailBankMaintenanceDowntimeRequest';
import {
  TESTDisbursementFailInvalidBankAccountRequest,
  tESTDisbursementFailInvalidBankAccountRequestSchema,
} from '../models/tESTDisbursementFailInvalidBankAccountRequest';
import {
  TESTDisbursementFailNotEnoughBalanceErrorRequest,
  tESTDisbursementFailNotEnoughBalanceErrorRequestSchema,
} from '../models/tESTDisbursementFailNotEnoughBalanceErrorRequest';
import {
  TESTDisbursementFailRejectedBecauseFatalErrorRequest,
  tESTDisbursementFailRejectedBecauseFatalErrorRequestSchema,
} from '../models/tESTDisbursementFailRejectedBecauseFatalErrorRequest';
import {
  TESTDisbursementFailRejectedBecauseTemporaryUnknownErrorRequest,
  tESTDisbursementFailRejectedBecauseTemporaryUnknownErrorRequestSchema,
} from '../models/tESTDisbursementFailRejectedBecauseTemporaryUnknownErrorRequest';
import {
  TESTDisbursementFailRejectedByBankRequest,
  tESTDisbursementFailRejectedByBankRequestSchema,
} from '../models/tESTDisbursementFailRejectedByBankRequest';
import {
  TESTDisbursementFailSwitchingNetworkDowntimeRequest,
  tESTDisbursementFailSwitchingNetworkDowntimeRequestSchema,
} from '../models/tESTDisbursementFailSwitchingNetworkDowntimeRequest';
import {
  TESTDisbursementFailUnknownBankNetworkErrorRequest,
  tESTDisbursementFailUnknownBankNetworkErrorRequestSchema,
} from '../models/tESTDisbursementFailUnknownBankNetworkErrorRequest';
import {
  TESTDisbursementSuccessRequest,
  tESTDisbursementSuccessRequestSchema,
} from '../models/tESTDisbursementSuccessRequest';
import {
  TESTInvoicePaidVirtualAccountRequest,
  tESTInvoicePaidVirtualAccountRequestSchema,
} from '../models/tESTInvoicePaidVirtualAccountRequest';
import {
  TESTPayAlfamartFPCRequest,
  tESTPayAlfamartFPCRequestSchema,
} from '../models/tESTPayAlfamartFPCRequest';
import {
  TESTPayFVARequest,
  tESTPayFVARequestSchema,
} from '../models/tESTPayFVARequest';
import {
  TESTPayIndomaretFPCRequest,
  tESTPayIndomaretFPCRequestSchema,
} from '../models/tESTPayIndomaretFPCRequest';
import {
  TESTPaymentInvoiceVARequest,
  tESTPaymentInvoiceVARequestSchema,
} from '../models/tESTPaymentInvoiceVARequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class SimulationsDevController extends BaseController {
  /**
   * Fixed Virtual Account (FVA) payment simulation by `external_id`
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTPayFVA(
    contentType: string,
    body: TESTPayFVARequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/callback_virtual_accounts/external_id=VA_fixed-1541055143/simulate_payment'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTPayFVARequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTPayAlfamartFPC(
    contentType: string,
    body: TESTPayAlfamartFPCRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/fixed_payment_code/simulate_payment'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTPayAlfamartFPCRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTPayIndomaretFPC(
    contentType: string,
    body: TESTPayIndomaretFPCRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/fixed_payment_code/simulate_payment'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTPayIndomaretFPCRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTInvoicePaidVirtualAccount(
    contentType: string,
    body: TESTInvoicePaidVirtualAccountRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/v2/invoices');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTInvoicePaidVirtualAccountRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Invoice Virtual Account (IVA) payment simulation by `bank_account_number`
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTPaymentInvoiceVA(
    contentType: string,
    body: TESTPaymentInvoiceVARequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/pool_virtual_accounts/simulate_payment'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTPaymentInvoiceVARequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTAlfamartPayment(
    contentType: string,
    body: TESTAlfamartPaymentRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/non_fixed_payment_code/simulate_payment'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTAlfamartPaymentRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will return not enough balance error
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementFailNotEnoughBalanceError(
    contentType: string,
    body: TESTDisbursementFailNotEnoughBalanceErrorRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTDisbursementFailNotEnoughBalanceErrorRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will return error for switching network error
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementFailSwitchingNetworkDowntime(
    contentType: string,
    body: TESTDisbursementFailSwitchingNetworkDowntimeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTDisbursementFailSwitchingNetworkDowntimeRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will return error for rejected by bank error
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementFailRejectedByBank(
    contentType: string,
    body: TESTDisbursementFailRejectedByBankRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTDisbursementFailRejectedByBankRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will complete payment and initiate callback API to your URL
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementSuccess(
    contentType: string,
    body: TESTDisbursementSuccessRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTDisbursementSuccessRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will return temporary transfer error
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementFailRejectedBecauseTemporaryUnknownError(
    contentType: string,
    body: TESTDisbursementFailRejectedBecauseTemporaryUnknownErrorRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [
        body,
        tESTDisbursementFailRejectedBecauseTemporaryUnknownErrorRequestSchema,
      ],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will return transfer error
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementFailRejectedBecauseFatalError(
    contentType: string,
    body: TESTDisbursementFailRejectedBecauseFatalErrorRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTDisbursementFailRejectedBecauseFatalErrorRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will return error for unknown bank network error
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementFailUnknownBankNetworkError(
    contentType: string,
    body: TESTDisbursementFailUnknownBankNetworkErrorRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTDisbursementFailUnknownBankNetworkErrorRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will return error for temporary bank network error
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementFailBankMaintenanceDowntime(
    contentType: string,
    body: TESTDisbursementFailBankMaintenanceDowntimeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTDisbursementFailBankMaintenanceDowntimeRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Will return error for invalid bank account
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async tESTDisbursementFailInvalidBankAccount(
    contentType: string,
    body: TESTDisbursementFailInvalidBankAccountRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, tESTDisbursementFailInvalidBankAccountRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
