/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateDANAEWalletChargeRequest,
  createDANAEWalletChargeRequestSchema,
} from '../models/createDANAEWalletChargeRequest';
import {
  CreateGcashEWalletChargeRequest,
  createGcashEWalletChargeRequestSchema,
} from '../models/createGcashEWalletChargeRequest';
import {
  CreateGrabpayEWalletChargeRequest,
  createGrabpayEWalletChargeRequestSchema,
} from '../models/createGrabpayEWalletChargeRequest';
import {
  CreateGrabpayTokenizedEWalletChargeRequest,
  createGrabpayTokenizedEWalletChargeRequestSchema,
} from '../models/createGrabpayTokenizedEWalletChargeRequest';
import {
  CreateLinkAjaEWalletChargeRequest,
  createLinkAjaEWalletChargeRequestSchema,
} from '../models/createLinkAjaEWalletChargeRequest';
import {
  CreateOVOEWalletChargeRequest,
  createOVOEWalletChargeRequestSchema,
} from '../models/createOVOEWalletChargeRequest';
import {
  CreateOVOTokenizedEWalletChargeRequest,
  createOVOTokenizedEWalletChargeRequestSchema,
} from '../models/createOVOTokenizedEWalletChargeRequest';
import {
  CreatePaymayaEWalletChargeRequest,
  createPaymayaEWalletChargeRequestSchema,
} from '../models/createPaymayaEWalletChargeRequest';
import {
  CreatePaymayaTokenizedEWalletChargeRequest,
  createPaymayaTokenizedEWalletChargeRequestSchema,
} from '../models/createPaymayaTokenizedEWalletChargeRequest';
import {
  CreateShopeepayEWalletChargeRequest,
  createShopeepayEWalletChargeRequestSchema,
} from '../models/createShopeepayEWalletChargeRequest';
import {
  CreateShopeepayTokenizedEWalletChargeRequest,
  createShopeepayTokenizedEWalletChargeRequestSchema,
} from '../models/createShopeepayTokenizedEWalletChargeRequest';
import {
  DANAOneTimePaymentSampleResponse,
  dANAOneTimePaymentSampleResponseSchema,
} from '../models/dANAOneTimePaymentSampleResponse';
import {
  GcashOneTimePaymentSampleResponse,
  gcashOneTimePaymentSampleResponseSchema,
} from '../models/gcashOneTimePaymentSampleResponse';
import {
  GrabpayOneTimePaymentsSampleResponse,
  grabpayOneTimePaymentsSampleResponseSchema,
} from '../models/grabpayOneTimePaymentsSampleResponse';
import {
  GrabpayTokenizedPaymentsSampleResponse,
  grabpayTokenizedPaymentsSampleResponseSchema,
} from '../models/grabpayTokenizedPaymentsSampleResponse';
import {
  LinkAjaOneTimePaymentSampleResponse,
  linkAjaOneTimePaymentSampleResponseSchema,
} from '../models/linkAjaOneTimePaymentSampleResponse';
import {
  OVOOneTimePaymentSampleResponse,
  oVOOneTimePaymentSampleResponseSchema,
} from '../models/oVOOneTimePaymentSampleResponse';
import {
  OVOTokenizedPaymentSampleResponse,
  oVOTokenizedPaymentSampleResponseSchema,
} from '../models/oVOTokenizedPaymentSampleResponse';
import {
  PaymayaOneTimePaymentsSampleResponse,
  paymayaOneTimePaymentsSampleResponseSchema,
} from '../models/paymayaOneTimePaymentsSampleResponse';
import {
  PaymayaTokenizedPaymentsSampleResponse,
  paymayaTokenizedPaymentsSampleResponseSchema,
} from '../models/paymayaTokenizedPaymentsSampleResponse';
import {
  SamplePaymentNotificationFromXenditRequest,
  samplePaymentNotificationFromXenditRequestSchema,
} from '../models/samplePaymentNotificationFromXenditRequest';
import {
  ShopeepayOneTimePaymentSampleResponse,
  shopeepayOneTimePaymentSampleResponseSchema,
} from '../models/shopeepayOneTimePaymentSampleResponse';
import {
  ShopeepayTokenizedPaymentSampleResponse,
  shopeepayTokenizedPaymentSampleResponseSchema,
} from '../models/shopeepayTokenizedPaymentSampleResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class ChargeCheckChargeStatusController extends BaseController {
  /**
   * This API will allow you to charge OVO eWallet in Indonesia through Xendit.
   *
   * It will accept order information such as `reference_id`, `amount`, and will produce `PENDING` status
   * in the response. `PENDING` status represent that a push notification has been pushed to your
   * customer's OVO app and is waiting for them to authorize and complete the charge.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more in [Xendit API Reference](https://developers.xendit.co/api-reference/#create-ewallet-
   * charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createOVOEWalletCharge(
    body: CreateOVOEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OVOOneTimePaymentSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createOVOEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      oVOOneTimePaymentSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge OVO eWallet
   * using tokens in Indonesia through Xendit.
   *
   * Account linking has to be performed before using this endpoint to make a tokenized payment. It will
   * accept order information such as `reference_id`, `amount`, `payment_method_id` and will produce
   * `is_redirect_required` = `true` and several `actions` items in the response.
   * These `actions` items will require you to redirect your customer to the designated checkout page to
   * authorize and complete the charge.
   * You'll only need to select one of the action item depending on your customer's device.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createOVOTokenizedEWalletCharge(
    body: CreateOVOTokenizedEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OVOTokenizedPaymentSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createOVOTokenizedEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      oVOTokenizedPaymentSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge Shopeepay eWallet in Indonesia through Xendit.
   *
   * It will accept order information such as `reference_id`, `amount`, and will produce
   * `is_redirect_required` = `true` and several `actions` items in the response.
   * These `actions` items will require you to redirect your customer to the designated checkout page to
   * authorize and complete the charge.
   * You'll only need to select one of the action item depending on your customer's device.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createShopeepayEWalletCharge(
    body: CreateShopeepayEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ShopeepayOneTimePaymentSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createShopeepayEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      shopeepayOneTimePaymentSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge OVO eWallet
   * using tokens in Indonesia through Xendit.
   *
   * Account linking has to be performed before using this endpoint to make a tokenized payment. It will
   * accept order information such as `reference_id`, `amount`, `payment_method_id` and will produce
   * `is_redirect_required` = `true` and several `actions` items in the response.
   * These `actions` items will require you to redirect your customer to the designated checkout page to
   * authorize and complete the charge.
   * You'll only need to select one of the action item depending on your customer's device.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createShopeepayTokenizedEWalletCharge(
    body: CreateShopeepayTokenizedEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ShopeepayTokenizedPaymentSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createShopeepayTokenizedEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      shopeepayTokenizedPaymentSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge DANA eWallet in Indonesia through Xendit.
   *
   * It will accept order information such as `reference_id`, `amount`, and will produce
   * `is_redirect_required` = `true` and several `actions` items in the response.
   * These `actions` items will require you to redirect your customer to the designated checkout page to
   * authorize and complete the charge.
   * You'll only need to select one of the action item depending on your customer's device.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createDANAEWalletCharge(
    body: CreateDANAEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DANAOneTimePaymentSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createDANAEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      dANAOneTimePaymentSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge LinkAja eWallet in Indonesia through Xendit.
   *
   * It will accept order information such as `reference_id`, `amount`, and will produce
   * `is_redirect_required` = `true` and several `actions` items in the response.
   * These `actions` items will require you to redirect your customer to the designated checkout page to
   * authorize and complete the charge.
   * You'll only need to select one of the action item depending on your customer's device.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createLinkAjaEWalletCharge(
    body: CreateLinkAjaEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LinkAjaOneTimePaymentSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createLinkAjaEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      linkAjaOneTimePaymentSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge Gcash eWallet in Philippines through Xendit.
   *
   * It will accept order information such as `reference_id`, `amount`, and will produce
   * `is_redirect_required` = `true` and several `actions` items in the response.
   * These `actions` items will require you to redirect your customer to the designated checkout page to
   * authorize and complete the charge.
   * You'll only need to select one of the action item depending on your customer's device.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createGcashEWalletCharge(
    body: CreateGcashEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GcashOneTimePaymentSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createGcashEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      gcashOneTimePaymentSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge Paymaya eWallet in Philippines through Xendit.
   *
   * It will accept order information such as `reference_id`, `amount`, and will produce
   * `is_redirect_required` = `true` and several `actions` items in the response.
   * These `actions` items will require you to redirect your customer to the designated checkout page to
   * authorize and complete the charge.
   * You'll only need to select one of the action item depending on your customer's device.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createPaymayaEWalletCharge(
    body: CreatePaymayaEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymayaOneTimePaymentsSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createPaymayaEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      paymayaOneTimePaymentsSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge Paymaya eWallet using tokens in Philippines through Xendit.
   *
   * Account linking has to be performed before using this endpoint to make a tokenized payment. It will
   * accept order information such as `reference_id`, `amount`, `payment_method_id` and will produce
   * `is_redirect_required` = `false`.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createPaymayaTokenizedEWalletCharge(
    body: CreatePaymayaTokenizedEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PaymayaTokenizedPaymentsSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createPaymayaTokenizedEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      paymayaTokenizedPaymentsSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge Grabpay eWallet in Philippines through Xendit.
   *
   * It will accept order information such as `reference_id`, `amount`, and will produce
   * `is_redirect_required` = `true` and several `actions` items in the response.
   * These `actions` items will require you to redirect your customer to the designated checkout page to
   * authorize and complete the charge.
   * You'll only need to select one of the action item depending on your customer's device.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createGrabpayEWalletCharge(
    body: CreateGrabpayEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GrabpayOneTimePaymentsSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createGrabpayEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      grabpayOneTimePaymentsSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * This API will allow you to charge Grabpay eWallet using tokens in Philippines through Xendit.
   *
   * Account linking has to be performed before using this endpoint to make a tokenized payment. It will
   * accept order information such as `reference_id`, `amount`, `payment_method_id` and will produce
   * `is_redirect_required` = `false`.
   *
   * A webhook or callback will be sent to your system after payment has been completed or failed.
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#create-ewallet-charge)
   *
   * @param body
   * @return Response from the API call
   */
  async createGrabpayTokenizedEWalletCharge(
    body: CreateGrabpayTokenizedEWalletChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GrabpayTokenizedPaymentsSampleResponse>> {
    const req = this.createRequest('POST', '/ewallets/charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, createGrabpayTokenizedEWalletChargeRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      grabpayTokenizedPaymentsSampleResponseSchema,
      requestOptions
    );
  }

  /**
   * Get Charge Status allow you to retrive charges you have made via Charge ID
   * You'll need to save Charge ID from POST eWallet API response
   *
   * Learn more about eWallet API in [Xendit API Reference](https://developers.xendit.co/api-
   * reference/#get-ewallet-charge-status)
   *
   * @param chargeId
   * @param authorization
   * @return Response from the API call
   */
  async getChargeStatus(
    chargeId: string,
    authorization: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      chargeId: [chargeId, string()],
      authorization: [authorization, string()],
    });
    req.header('Authorization', mapped.authorization);
    req.appendTemplatePath`/ewallets/charges/${mapped.chargeId}`;
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async samplePaymentNotificationFromXendit(
    body: SamplePaymentNotificationFromXenditRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/');
    req.baseUrl('Server 2');
    const mapped = req.prepareArgs({
      body: [body, samplePaymentNotificationFromXenditRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
