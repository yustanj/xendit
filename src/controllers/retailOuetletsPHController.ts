/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreatePaymentCode7ELEVENCLIQQRequest,
  createPaymentCode7ELEVENCLIQQRequestSchema,
} from '../models/createPaymentCode7ELEVENCLIQQRequest';
import {
  CreatePaymentCode7ELEVENRequest,
  createPaymentCode7ELEVENRequestSchema,
} from '../models/createPaymentCode7ELEVENRequest';
import {
  CreatePaymentCodeCEBUANARequest,
  createPaymentCodeCEBUANARequestSchema,
} from '../models/createPaymentCodeCEBUANARequest';
import {
  UpdatePaymentCodeRequest,
  updatePaymentCodeRequestSchema,
} from '../models/updatePaymentCodeRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class RetailOuetletsPHController extends BaseController {
  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createPaymentCode7ELEVEN(
    contentType: string,
    body: CreatePaymentCode7ELEVENRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/payment_codes');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createPaymentCode7ELEVENRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createPaymentCode7ELEVENCLIQQ(
    contentType: string,
    body: CreatePaymentCode7ELEVENCLIQQRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/payment_codes');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createPaymentCode7ELEVENCLIQQRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createPaymentCodeCEBUANA(
    contentType: string,
    body: CreatePaymentCodeCEBUANARequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/payment_codes');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createPaymentCodeCEBUANARequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param paymentCodeId
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async updatePaymentCode(
    paymentCodeId: string,
    contentType: string,
    body: UpdatePaymentCodeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      paymentCodeId: [paymentCodeId, string()],
      contentType: [contentType, string()],
      body: [body, updatePaymentCodeRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    req.appendTemplatePath`/payment_codes/${mapped.paymentCodeId}`;
    return req.call(requestOptions);
  }

  /**
   * @param paymentCodeId
   * @param contentType
   * @return Response from the API call
   */
  async getPaymentCodeByID(
    paymentCodeId: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      paymentCodeId: [paymentCodeId, string()],
      contentType: [contentType, string()],
    });
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/payment_codes/${mapped.paymentCodeId}`;
    return req.call(requestOptions);
  }

  /**
   * @param paymentCodeId
   * @param contentType
   * @return Response from the API call
   */
  async getPayments(
    paymentCodeId: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      paymentCodeId: [paymentCodeId, string()],
      contentType: [contentType, string()],
    });
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/payment_codes/${mapped.paymentCodeId}/payments`;
    return req.call(requestOptions);
  }
}
