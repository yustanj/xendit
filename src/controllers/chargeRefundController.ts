/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ChargeAuthCaptureRequest,
  chargeAuthCaptureRequestSchema,
} from '../models/chargeAuthCaptureRequest';
import {
  RefundChargeByExternalIDRequest,
  refundChargeByExternalIDRequestSchema,
} from '../models/refundChargeByExternalIDRequest';
import {
  RefundChargeRequest,
  refundChargeRequestSchema,
} from '../models/refundChargeRequest';
import { Success, successSchema } from '../models/success';
import { Success1, success1Schema } from '../models/success1';
import { string } from '../schema';
import { BaseController } from './baseController';

export class ChargeRefundController extends BaseController {
  /**
   * Use the [Tokenization Demo](https://js.xendit.co/test_tokenize.html) to create a token &
   * authentication ID
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async chargeAuthCapture(
    contentType: string,
    body: ChargeAuthCaptureRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, chargeAuthCaptureRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async refundCharge(
    contentType: string,
    body: RefundChargeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/credit_card_charges/5bda9c5cb53e060168464ffd/refunds'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, refundChargeRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param idType
   * @param id
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async refundChargeByExternalID(
    idType: string,
    id: string,
    contentType: string,
    body: RefundChargeByExternalIDRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Success>> {
    const req = this.createRequest('POST');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      idType: [idType, string()],
      id: [id, string()],
      contentType: [contentType, string()],
      body: [body, refundChargeByExternalIDRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.query('id_type', mapped.idType);
    req.json(mapped.body);
    req.appendTemplatePath`/credit_card_charges/${mapped.id}/refunds`;
    return req.callAsJson(successSchema, requestOptions);
  }

  /**
   * @param creditCardChargeId    Xendit Charge ID
   * @param contentType
   * @return Response from the API call
   */
  async getCharge(
    creditCardChargeId: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Success1>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      creditCardChargeId: [creditCardChargeId, string()],
      contentType: [contentType, string()],
    });
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/credit_card_charges/${mapped.creditCardChargeId}`;
    return req.callAsJson(success1Schema, requestOptions);
  }

  /**
   * @param idType
   * @param id
   * @return Response from the API call
   */
  async getChargeByExternalID(
    idType: string,
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      idType: [idType, string()],
      id: [id, string()],
    });
    req.query('id_type', mapped.idType);
    req.appendTemplatePath`/credit_card_charges/${mapped.id}`;
    return req.call(requestOptions);
  }
}
