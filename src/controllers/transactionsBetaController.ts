/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { number, string } from '../schema';
import { BaseController } from './baseController';

export class TransactionsBetaController extends BaseController {
  /**
   * @param id
   * @return Response from the API call
   */
  async getTransaction(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/transactions/${mapped.id}`;
    return req.call(requestOptions);
  }

  /**
   * @param types
   * @param statuses
   * @param channelCategories
   * @param referenceId
   * @param productId
   * @param accountIdentifier
   * @param amount
   * @param currency
   * @param createdGte
   * @param createdLte
   * @param updatedGte
   * @param updatedLte
   * @param limit
   * @param afterId
   * @param beforeId
   * @return Response from the API call
   */
  async listTransactions(
    types: string,
    statuses: string,
    channelCategories: string,
    referenceId: string,
    productId: string,
    accountIdentifier: string,
    amount: string,
    currency: string,
    createdGte: string,
    createdLte: string,
    updatedGte: string,
    updatedLte: string,
    limit: number,
    afterId: string,
    beforeId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/transactions');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      types: [types, string()],
      statuses: [statuses, string()],
      channelCategories: [channelCategories, string()],
      referenceId: [referenceId, string()],
      productId: [productId, string()],
      accountIdentifier: [accountIdentifier, string()],
      amount: [amount, string()],
      currency: [currency, string()],
      createdGte: [createdGte, string()],
      createdLte: [createdLte, string()],
      updatedGte: [updatedGte, string()],
      updatedLte: [updatedLte, string()],
      limit: [limit, number()],
      afterId: [afterId, string()],
      beforeId: [beforeId, string()],
    });
    req.query('types', mapped.types);
    req.query('statuses', mapped.statuses);
    req.query('channel_categories', mapped.channelCategories);
    req.query('reference_id', mapped.referenceId);
    req.query('product_id', mapped.productId);
    req.query('account_identifier', mapped.accountIdentifier);
    req.query('amount', mapped.amount);
    req.query('currency', mapped.currency);
    req.query('created[gte]', mapped.createdGte);
    req.query('created[lte]', mapped.createdLte);
    req.query('updated[gte]', mapped.updatedGte);
    req.query('updated[lte]', mapped.updatedLte);
    req.query('limit', mapped.limit);
    req.query('after_id', mapped.afterId);
    req.query('before_id', mapped.beforeId);
    return req.call(requestOptions);
  }
}
