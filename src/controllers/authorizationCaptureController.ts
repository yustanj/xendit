/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AuthorizeHoldAmountRequest,
  authorizeHoldAmountRequestSchema,
} from '../models/authorizeHoldAmountRequest';
import {
  CaptureAuthRequest,
  captureAuthRequestSchema,
} from '../models/captureAuthRequest';
import {
  ReverseAuthRequest,
  reverseAuthRequestSchema,
} from '../models/reverseAuthRequest';
import {
  ZeroAuthVerifyCardRequest,
  zeroAuthVerifyCardRequestSchema,
} from '../models/zeroAuthVerifyCardRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class AuthorizationCaptureController extends BaseController {
  /**
   * Use the [Tokenization Demo](https://js.xendit.co/test_tokenize.html) to create a token &
   * authentication ID
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async authorizeHoldAmount(
    contentType: string,
    body: AuthorizeHoldAmountRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, authorizeHoldAmountRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async captureAuth(
    contentType: string,
    body: CaptureAuthRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/credit_card_charges/5c1106df15dcfc7bc88b6ed6/capture'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, captureAuthRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async reverseAuth(
    contentType: string,
    body: ReverseAuthRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'POST',
      '/credit_card_charges/5c1106df15dcfc7bc88b6ed6/auth_reversal'
    );
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, reverseAuthRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async zeroAuthVerifyCard(
    contentType: string,
    body: ZeroAuthVerifyCardRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, zeroAuthVerifyCardRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
