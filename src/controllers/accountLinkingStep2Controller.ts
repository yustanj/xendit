/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  AccountLinkingCallbackNotificationRequest,
  accountLinkingCallbackNotificationRequestSchema,
} from '../models/accountLinkingCallbackNotificationRequest';
import {
  GrabpayTokenizedAccountLinkingRequest,
  grabpayTokenizedAccountLinkingRequestSchema,
} from '../models/grabpayTokenizedAccountLinkingRequest';
import {
  GRABPAYTokenizedInitiateAccountLinkingCopy,
  gRABPAYTokenizedInitiateAccountLinkingCopySchema,
} from '../models/gRABPAYTokenizedInitiateAccountLinkingCopy';
import {
  OVOTokenizedAccountLinking,
  oVOTokenizedAccountLinkingSchema,
} from '../models/oVOTokenizedAccountLinking';
import {
  OVOTokenizedAccountLinkingRequest,
  oVOTokenizedAccountLinkingRequestSchema,
} from '../models/oVOTokenizedAccountLinkingRequest';
import {
  PaymayaTokenizedAccountLinkingRequest,
  paymayaTokenizedAccountLinkingRequestSchema,
} from '../models/paymayaTokenizedAccountLinkingRequest';
import {
  PAYMAYATokenizedInitiateAccountLinking,
  pAYMAYATokenizedInitiateAccountLinkingSchema,
} from '../models/pAYMAYATokenizedInitiateAccountLinking';
import {
  ShopeepayTokenizedAccountLinkingRequest,
  shopeepayTokenizedAccountLinkingRequestSchema,
} from '../models/shopeepayTokenizedAccountLinkingRequest';
import {
  ShopeepayTokenizedInitiateAccountLinking,
  shopeepayTokenizedInitiateAccountLinkingSchema,
} from '../models/shopeepayTokenizedInitiateAccountLinking';
import { BaseController } from './baseController';

export class AccountLinkingStep2Controller extends BaseController {
  /**
   * @param body
   * @return Response from the API call
   */
  async oVOTokenizedAccountLinking(
    body: OVOTokenizedAccountLinkingRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<OVOTokenizedAccountLinking>> {
    const req = this.createRequest('POST', '/linked_account_tokens/auth');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, oVOTokenizedAccountLinkingRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(oVOTokenizedAccountLinkingSchema, requestOptions);
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async paymayaTokenizedAccountLinking(
    body: PaymayaTokenizedAccountLinkingRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<PAYMAYATokenizedInitiateAccountLinking>> {
    const req = this.createRequest('POST', '/linked_account_tokens/auth');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, paymayaTokenizedAccountLinkingRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      pAYMAYATokenizedInitiateAccountLinkingSchema,
      requestOptions
    );
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async grabpayTokenizedAccountLinking(
    body: GrabpayTokenizedAccountLinkingRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GRABPAYTokenizedInitiateAccountLinkingCopy>> {
    const req = this.createRequest('POST', '/linked_account_tokens/auth');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, grabpayTokenizedAccountLinkingRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      gRABPAYTokenizedInitiateAccountLinkingCopySchema,
      requestOptions
    );
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async shopeepayTokenizedAccountLinking(
    body: ShopeepayTokenizedAccountLinkingRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ShopeepayTokenizedInitiateAccountLinking>> {
    const req = this.createRequest('POST', '/linked_account_tokens/auth');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      body: [body, shopeepayTokenizedAccountLinkingRequestSchema],
    });
    req.json(mapped.body);
    return req.callAsJson(
      shopeepayTokenizedInitiateAccountLinkingSchema,
      requestOptions
    );
  }

  /**
   * @param body
   * @return Response from the API call
   */
  async accountLinkingCallbackNotification(
    body: AccountLinkingCallbackNotificationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/');
    req.baseUrl('Server 3');
    const mapped = req.prepareArgs({
      body: [body, accountLinkingCallbackNotificationRequestSchema],
    });
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
