/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateFVARequest,
  createFVARequestSchema,
} from '../models/createFVARequest';
import {
  CreateSpecificFVARequest,
  createSpecificFVARequestSchema,
} from '../models/createSpecificFVARequest';
import {
  UpdateVirtualAccountRequest,
  updateVirtualAccountRequestSchema,
} from '../models/updateVirtualAccountRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class VirtualAccountsController extends BaseController {
  /**
   * [[API Reference] - Create Fixed VA](https://xendit.github.io/apireference/#create-fixed-virtual-
   * accounts)
   *
   * [[Xendit Docs] - Fixed Virtual Accounts](https://docs.xendit.co/xenpayments/virtual-account/)
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createFVA(
    contentType: string,
    body: CreateFVARequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/callback_virtual_accounts');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createFVARequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * [[API Reference] - Create Fixed VA](https://xendit.github.io/apireference/#create-fixed-virtual-
   * accounts)
   *
   * [[Xendit Docs] - Fixed Virtual Accounts](https://docs.xendit.co/xenpayments/virtual-account/)
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createSpecificFVA(
    contentType: string,
    body: CreateSpecificFVARequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/callback_virtual_accounts');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createSpecificFVARequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * [[API Reference] - Get banks for virtual accounts](https://xendit.github.io/apireference/#get-banks-
   * for-virtual-accounts)
   *
   * [[Xendit Docs] - Fixed Virtual Accounts](https://docs.xendit.co/xenpayments/virtual-account/)
   *
   * @param authorization
   * @return Response from the API call
   */
  async listAvailableFVABanks(
    authorization: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/available_virtual_account_banks');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      authorization: [authorization, string()],
    });
    req.header('Authorization', mapped.authorization);
    req.authenticate(false);
    return req.call(requestOptions);
  }

  /**
   * [[API Reference] - Get banks for virtual accounts](https://xendit.github.io/apireference/#get-banks-
   * for-virtual-accounts)
   *
   * [[Xendit Docs] - Fixed Virtual Accounts](https://docs.xendit.co/xenpayments/virtual-account/)
   *
   * @param id
   * @return Response from the API call
   */
  async getVirtualAccount(
    id: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({ id: [id, string()] });
    req.appendTemplatePath`/callback_virtual_accounts/${mapped.id}`;
    return req.call(requestOptions);
  }

  /**
   * [[API Reference] - Create Fixed VA](https://xendit.github.io/apireference/#create-fixed-virtual-
   * accounts)
   *
   * [[Xendit Docs] - Fixed Virtual Accounts](https://docs.xendit.co/xenpayments/virtual-account/)
   *
   * @param id
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async updateVirtualAccount(
    id: string,
    contentType: string,
    body: UpdateVirtualAccountRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      id: [id, string()],
      contentType: [contentType, string()],
      body: [body, updateVirtualAccountRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    req.appendTemplatePath`/callback_virtual_accounts/${mapped.id}`;
    return req.call(requestOptions);
  }

  /**
   * [[API Reference] - Get banks for virtual accounts](https://xendit.github.io/apireference/#get-banks-
   * for-virtual-accounts)
   *
   * [[Xendit Docs] - Fixed Virtual Accounts](https://docs.xendit.co/xenpayments/virtual-account/)
   *
   * @return Response from the API call
   */
  async getVirtualAccountPayment(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/callback_virtual_account_payments/payment_id=:payment_id'
    );
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }
}
