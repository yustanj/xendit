/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CARDDECLINEDREQUEST,
  cARDDECLINEDREQUESTSchema,
} from '../models/cARDDECLINEDREQUEST';
import {
  EXPIREDCARDREQUEST,
  eXPIREDCARDREQUESTSchema,
} from '../models/eXPIREDCARDREQUEST';
import {
  INACTIVECARDREQUEST,
  iNACTIVECARDREQUESTSchema,
} from '../models/iNACTIVECARDREQUEST';
import {
  INSUFFICIENTBALANCEREQUEST,
  iNSUFFICIENTBALANCEREQUESTSchema,
} from '../models/iNSUFFICIENTBALANCEREQUEST';
import {
  PROCESSORERRORREQUEST,
  pROCESSORERRORREQUESTSchema,
} from '../models/pROCESSORERRORREQUEST';
import {
  STOLENCARDREQUEST,
  sTOLENCARDREQUESTSchema,
} from '../models/sTOLENCARDREQUEST';
import { string } from '../schema';
import { BaseController } from './baseController';

export class DEVTestCasesController extends BaseController {
  /**
   * Use the [Tokenization Demo](https://js.xendit.co/test_tokenize.html) to create a token &
   * authentication ID
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async eXPIREDCARD(
    contentType: string,
    body: EXPIREDCARDREQUEST,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, eXPIREDCARDREQUESTSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Use the [Tokenization Demo](https://js.xendit.co/test_tokenize.html) to create a token &
   * authentication ID
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async cARDDECLINED(
    contentType: string,
    body: CARDDECLINEDREQUEST,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, cARDDECLINEDREQUESTSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Use the [Tokenization Demo](https://js.xendit.co/test_tokenize.html) to create a token &
   * authentication ID
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async iNSUFFICIENTBALANCE(
    contentType: string,
    body: INSUFFICIENTBALANCEREQUEST,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, iNSUFFICIENTBALANCEREQUESTSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Use the [Tokenization Demo](https://js.xendit.co/test_tokenize.html) to create a token &
   * authentication ID
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async sTOLENCARD(
    contentType: string,
    body: STOLENCARDREQUEST,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, sTOLENCARDREQUESTSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Use the [Tokenization Demo](https://js.xendit.co/test_tokenize.html) to create a token &
   * authentication ID
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async iNACTIVECARD(
    contentType: string,
    body: INACTIVECARDREQUEST,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, iNACTIVECARDREQUESTSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Use the [Tokenization Demo](https://js.xendit.co/test_tokenize.html) to create a token &
   * authentication ID
   *
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async pROCESSORERROR(
    contentType: string,
    body: PROCESSORERRORREQUEST,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/credit_card_charges');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, pROCESSORERRORREQUESTSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
