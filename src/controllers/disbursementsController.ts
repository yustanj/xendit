/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateBatchDisbursementRequest,
  createBatchDisbursementRequestSchema,
} from '../models/createBatchDisbursementRequest';
import {
  CreateDisbursementRequest,
  createDisbursementRequestSchema,
} from '../models/createDisbursementRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class DisbursementsController extends BaseController {
  /**
   * @param contentType
   * @param xIDEMPOTENCYKEY
   * @param body
   * @return Response from the API call
   */
  async createDisbursement(
    contentType: string,
    xIDEMPOTENCYKEY: string,
    body: CreateDisbursementRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      xIDEMPOTENCYKEY: [xIDEMPOTENCYKEY, string()],
      body: [body, createDisbursementRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('X-IDEMPOTENCY-KEY', mapped.xIDEMPOTENCYKEY);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * Batch disbursements are a set of instructions containing multiple commands to disburse funds to any
   * bank in Indonesia.
   *
   * @param contentType
   * @param xIDEMPOTENCYKEY
   * @param body
   * @return Response from the API call
   */
  async createBatchDisbursement(
    contentType: string,
    xIDEMPOTENCYKEY: string,
    body: CreateBatchDisbursementRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/batch_disbursements');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      xIDEMPOTENCYKEY: [xIDEMPOTENCYKEY, string()],
      body: [body, createBatchDisbursementRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.header('X-IDEMPOTENCY-KEY', mapped.xIDEMPOTENCYKEY);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async getDisbursement(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest(
      'GET',
      '/disbursements/5bdaa16d633edc1000afbc48'
    );
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }

  /**
   * @return Response from the API call
   */
  async listDisbursementBanks(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET', '/available_disbursements_banks');
    req.baseUrl('Server 1');
    return req.call(requestOptions);
  }
}
