/**
 * API-XenditLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  CreateFPCAlfamartRequest,
  createFPCAlfamartRequestSchema,
} from '../models/createFPCAlfamartRequest';
import {
  CreateFPCIndomaretRequest,
  createFPCIndomaretRequestSchema,
} from '../models/createFPCIndomaretRequest';
import {
  UpdateFPCRequest,
  updateFPCRequestSchema,
} from '../models/updateFPCRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class RetailOutletsIDController extends BaseController {
  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createFPCAlfamart(
    contentType: string,
    body: CreateFPCAlfamartRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/fixed_payment_code');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createFPCAlfamartRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async createFPCIndomaret(
    contentType: string,
    body: CreateFPCIndomaretRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/fixed_payment_code');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      contentType: [contentType, string()],
      body: [body, createFPCIndomaretRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    return req.call(requestOptions);
  }

  /**
   * @param fixedPaymentCodeId
   * @param contentType
   * @param body
   * @return Response from the API call
   */
  async updateFPC(
    fixedPaymentCodeId: string,
    contentType: string,
    body: UpdateFPCRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('PATCH');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      fixedPaymentCodeId: [fixedPaymentCodeId, string()],
      contentType: [contentType, string()],
      body: [body, updateFPCRequestSchema],
    });
    req.header('Content-Type', mapped.contentType);
    req.json(mapped.body);
    req.appendTemplatePath`/fixed_payment_code/${mapped.fixedPaymentCodeId}`;
    return req.call(requestOptions);
  }

  /**
   * @param fixedPaymentCodeId
   * @param contentType
   * @return Response from the API call
   */
  async getFPCDetail(
    fixedPaymentCodeId: string,
    contentType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('GET');
    req.baseUrl('Server 1');
    const mapped = req.prepareArgs({
      fixedPaymentCodeId: [fixedPaymentCodeId, string()],
      contentType: [contentType, string()],
    });
    req.header('Content-Type', mapped.contentType);
    req.appendTemplatePath`/fixed_payment_code/${mapped.fixedPaymentCodeId}`;
    return req.call(requestOptions);
  }
}
